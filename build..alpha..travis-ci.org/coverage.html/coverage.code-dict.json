{"/home/travis/build/npmtest/node-npmtest-limiter/test.js":"/* istanbul instrument in package npmtest_limiter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-limiter/lib.npmtest_limiter.js":"/* istanbul instrument in package npmtest_limiter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_limiter = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_limiter = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-limiter/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-limiter && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_limiter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_limiter\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_limiter.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_limiter.rollup.js'] =\n            local.assetsDict['/assets.npmtest_limiter.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_limiter.__dirname + '/lib.npmtest_limiter.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-limiter/node_modules/limiter/index.js":"\nexports.RateLimiter = require('./lib/rateLimiter');\nexports.TokenBucket = require('./lib/tokenBucket');\n","/home/travis/build/npmtest/node-npmtest-limiter/node_modules/limiter/lib/rateLimiter.js":"var TokenBucket = require('./tokenBucket');\n\n/**\n * A generic rate limiter. Underneath the hood, this uses a token bucket plus\n * an additional check to limit how many tokens we can remove each interval.\n * @author John Hurliman <jhurliman@jhurliman.org>\n *\n * @param {Number} tokensPerInterval Maximum number of tokens that can be\n *  removed at any given moment and over the course of one interval.\n * @param {String|Number} interval The interval length in milliseconds, or as\n *  one of the following strings: 'second', 'minute', 'hour', day'.\n * @param {Boolean} fireImmediately Optional. Whether or not the callback\n *  will fire immediately when rate limiting is in effect (default is false).\n */\nvar RateLimiter = function(tokensPerInterval, interval, fireImmediately) {\n  this.tokenBucket = new TokenBucket(tokensPerInterval, tokensPerInterval,\n    interval, null);\n\n  // Fill the token bucket to start\n  this.tokenBucket.content = tokensPerInterval;\n\n  this.curIntervalStart = +new Date();\n  this.tokensThisInterval = 0;\n  this.fireImmediately = fireImmediately;\n};\n\nRateLimiter.prototype = {\n  tokenBucket: null,\n  curIntervalStart: 0,\n  tokensThisInterval: 0,\n  fireImmediately: false,\n\n  /**\n   * Remove the requested number of tokens and fire the given callback. If the\n   * rate limiter contains enough tokens and we haven't spent too many tokens\n   * in this interval already, this will happen immediately. Otherwise, the\n   * removal and callback will happen when enough tokens become available.\n   * @param {Number} count The number of tokens to remove.\n   * @param {Function} callback(err, remainingTokens)\n   * @returns {Boolean} True if the callback was fired immediately, otherwise\n   *  false.\n   */\n  removeTokens: function(count, callback) {\n    // Make sure the request isn't for more than we can handle\n    if (count > this.tokenBucket.bucketSize) {\n      process.nextTick(callback.bind(null, 'Requested tokens ' + count +\n        ' exceeds maximum tokens per interval ' + this.tokenBucket.bucketSize,\n        null));\n      return false;\n    }\n\n    var self = this;\n    var now = Date.now();\n\n    // Advance the current interval and reset the current interval token count\n    // if needed\n    if (now - this.curIntervalStart >= this.tokenBucket.interval) {\n      this.curIntervalStart = now;\n      this.tokensThisInterval = 0;\n    }\n\n    // If we don't have enough tokens left in this interval, wait until the\n    // next interval\n    if (count > this.tokenBucket.tokensPerInterval - this.tokensThisInterval) {\n      if (this.fireImmediately) {\n        process.nextTick(callback.bind(null, null, -1));\n      } else {\n        var waitInterval = Math.ceil(\n          this.curIntervalStart + this.tokenBucket.interval - now);\n\n        setTimeout(function() {\n          self.tokenBucket.removeTokens(count, afterTokensRemoved);\n        }, waitInterval);\n      }\n      return false;\n    }\n\n    // Remove the requested number of tokens from the token bucket\n    return this.tokenBucket.removeTokens(count, afterTokensRemoved);\n\n    function afterTokensRemoved(err, tokensRemaining) {\n      if (err) return callback(err, null);\n\n      self.tokensThisInterval += count;\n      callback(null, tokensRemaining);\n    }\n  },\n\n  /**\n   * Attempt to remove the requested number of tokens and return immediately.\n   * If the bucket (and any parent buckets) contains enough tokens and we\n   * haven't spent too many tokens in this interval already, this will return\n   * true. Otherwise, false is returned.\n   * @param {Number} count The number of tokens to remove.\n   * @param {Boolean} True if the tokens were successfully removed, otherwise\n   *  false.\n   */\n  tryRemoveTokens: function(count) {\n    // Make sure the request isn't for more than we can handle\n    if (count > this.tokenBucket.bucketSize)\n      return false;\n\n    var now = Date.now();\n\n    // Advance the current interval and reset the current interval token count\n    // if needed\n    if (now - this.curIntervalStart >= this.tokenBucket.interval) {\n      this.curIntervalStart = now;\n      this.tokensThisInterval = 0;\n    }\n\n    // If we don't have enough tokens left in this interval, return false\n    if (count > this.tokenBucket.tokensPerInterval - this.tokensThisInterval)\n      return false;\n\n    // Try to remove the requested number of tokens from the token bucket\n    return this.tokenBucket.tryRemoveTokens(count);\n  },\n\n  /**\n   * Returns the number of tokens remaining in the TokenBucket.\n   * @returns {Number} The number of tokens remaining.\n   */\n  getTokensRemaining: function () {\n    this.tokenBucket.drip();\n    return this.tokenBucket.content;\n  }\n};\n\nmodule.exports = RateLimiter;\n","/home/travis/build/npmtest/node-npmtest-limiter/node_modules/limiter/lib/tokenBucket.js":"\n/**\n * A hierarchical token bucket for rate limiting. See\n * http://en.wikipedia.org/wiki/Token_bucket for more information.\n * @author John Hurliman <jhurliman@cull.tv>\n *\n * @param {Number} bucketSize Maximum number of tokens to hold in the bucket.\n *  Also known as the burst rate.\n * @param {Number} tokensPerInterval Number of tokens to drip into the bucket\n *  over the course of one interval.\n * @param {String|Number} interval The interval length in milliseconds, or as\n *  one of the following strings: 'second', 'minute', 'hour', day'.\n * @param {TokenBucket} parentBucket Optional. A token bucket that will act as\n *  the parent of this bucket.\n */\nvar TokenBucket = function(bucketSize, tokensPerInterval, interval, parentBucket) {\n  this.bucketSize = bucketSize;\n  this.tokensPerInterval = tokensPerInterval;\n\n  if (typeof interval === 'string') {\n    switch (interval) {\n      case 'sec': case 'second':\n        this.interval = 1000; break;\n      case 'min': case 'minute':\n        this.interval = 1000 * 60; break;\n      case 'hr': case 'hour':\n        this.interval = 1000 * 60 * 60; break;\n      case 'day':\n        this.interval = 1000 * 60 * 60 * 24; break;\n    }\n  } else {\n    this.interval = interval;\n  }\n\n  this.parentBucket = parentBucket;\n  this.content = 0;\n  this.lastDrip = +new Date();\n};\n\nTokenBucket.prototype = {\n  bucketSize: 1,\n  tokensPerInterval: 1,\n  interval: 1000,\n  parentBucket: null,\n  content: 0,\n  lastDrip: 0,\n\n  /**\n   * Remove the requested number of tokens and fire the given callback. If the\n   * bucket (and any parent buckets) contains enough tokens this will happen\n   * immediately. Otherwise, the removal and callback will happen when enough\n   * tokens become available.\n   * @param {Number} count The number of tokens to remove.\n   * @param {Function} callback(err, remainingTokens)\n   * @returns {Boolean} True if the callback was fired immediately, otherwise\n   *  false.\n   */\n  removeTokens: function(count, callback) {\n    var self = this;\n\n    // Is this an infinite size bucket?\n    if (!this.bucketSize) {\n      process.nextTick(callback.bind(null, null, count, Number.POSITIVE_INFINITY));\n      return true;\n    }\n\n    // Make sure the bucket can hold the requested number of tokens\n    if (count > this.bucketSize) {\n      process.nextTick(callback.bind(null, 'Requested tokens ' + count + ' exceeds bucket size ' +\n        this.bucketSize, null));\n      return false;\n    }\n\n    // Drip new tokens into this bucket\n    this.drip();\n\n    // If we don't have enough tokens in this bucket, come back later\n    if (count > this.content)\n      return comeBackLater();\n\n    if (this.parentBucket) {\n      // Remove the requested from the parent bucket first\n      return this.parentBucket.removeTokens(count, function(err, remainingTokens) {\n        if (err) return callback(err, null);\n\n        // Check that we still have enough tokens in this bucket\n        if (count > self.content)\n          return comeBackLater();\n\n        // Tokens were removed from the parent bucket, now remove them from\n        // this bucket and fire the callback. Note that we look at the current\n        // bucket and parent bucket's remaining tokens and return the smaller\n        // of the two values\n        self.content -= count;\n        callback(null, Math.min(remainingTokens, self.content));\n      });\n    } else {\n      // Remove the requested tokens from this bucket and fire the callback\n      this.content -= count;\n      process.nextTick(callback.bind(null, null, this.content));\n      return true;\n    }\n\n    function comeBackLater() {\n      // How long do we need to wait to make up the difference in tokens?\n      var waitInterval = Math.ceil(\n        (count - self.content) * (self.interval / self.tokensPerInterval));\n      setTimeout(function() { self.removeTokens(count, callback); }, waitInterval);\n      return false;\n    }\n  },\n\n  /**\n   * Attempt to remove the requested number of tokens and return immediately.\n   * If the bucket (and any parent buckets) contains enough tokens this will\n   * return true, otherwise false is returned.\n   * @param {Number} count The number of tokens to remove.\n   * @param {Boolean} True if the tokens were successfully removed, otherwise\n   *  false.\n   */\n  tryRemoveTokens: function(count) {\n    // Is this an infinite size bucket?\n    if (!this.bucketSize)\n      return true;\n\n    // Make sure the bucket can hold the requested number of tokens\n    if (count > this.bucketSize)\n      return false;\n\n    // Drip new tokens into this bucket\n    this.drip();\n\n    // If we don't have enough tokens in this bucket, return false\n    if (count > this.content)\n      return false;\n\n    // Try to remove the requested tokens from the parent bucket\n    if (this.parentBucket && !this.parent.tryRemoveTokens(count))\n      return false;\n\n    // Remove the requested tokens from this bucket and return\n    this.content -= count;\n    return true;\n  },\n\n  /**\n   * Add any new tokens to the bucket since the last drip.\n   * @returns {Boolean} True if new tokens were added, otherwise false.\n   */\n  drip: function() {\n    if (!this.tokensPerInterval) {\n      this.content = this.bucketSize;\n      return;\n    }\n\n    var now = +new Date();\n    var deltaMS = Math.max(now - this.lastDrip, 0);\n    this.lastDrip = now;\n\n    var dripAmount = deltaMS * (this.tokensPerInterval / this.interval);\n    this.content = Math.min(this.content + dripAmount, this.bucketSize);\n  }\n};\n\nmodule.exports = TokenBucket;\n"}